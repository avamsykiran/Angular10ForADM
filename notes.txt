Environental Setup
------------------------------

        NODE JS
        Visual Code
        
Angular
-----------------------------------

        is a javascript SPA framework 

        Angular 1               angularJS

        Angular 2               angular             typescript

        Angular 11


        Typescript  =  Javascript  +  typesafty.

                var f1 = (a,b) => {
                    ...................
                }

                var f1 = (a:number,b:number):number => {
                    ...................
                }

        Node JS
        ---------------------------------------------------------

                    Javascript execution / runtiem environment.


                Development Platform

                        Javascript Project 
                                + Angular Library
                                + Testing Libraires 
                                            Karma
                                            Protractor
                                            Jasmine
                                + Workflow automation libraries 
                                            Babbel          ts to js transpolation
                                            Grunt and Gulp
                                            Minification tools
                                            Watcher
                                            Angular Live Development Server
                                + Building Libraries 
                                            npm              node package manager

                
        Node  npm
        -----------------------

                Create a project
                        md node-proj01
                        cd node-proj01
                        npm init
                        npm install library-name --save
        
        Angular CLI
        ---------[Command Line Interface]---

                ng --version

                ng new project-name        //creating a new project

                
        Angular Archetecture
        -------------------------------------------------------

                Module     
                        is a logical collection of
                        Directives,Components,Services,Pipes and other modules.

                        is a typescript class marked with a decorator @NgModule

                        the parameters passed as JSON to a decorator is called metadata

                        @NgModule({
                           declarations:[
                                   list of Components,
                                   list of Pipes,
                                   list of Directives...
                           ],
                           imports:[
                                   list of sub-modules,
                           ],
                           providers:[
                                   list of services
                           ]     
                        })
                        class MyModule{
                        }

                        Every angular project must contain one and only root module.
                        Inside the root module we can include any number of 
                        sub-modules called feature-modules
                
                Component
                
                        Angular gives extandability to HTML.

                        Which means , using angular we
                        can create our own elements(tag) and attributes

                        A Component is nothing but a new HTML element.

                        Component = Controller + Template

                                Template distacts how the components is rendred on the page
                                Controller dictates the behaviour or event handling of the Component

                        A Component is a typescript class marked with @Component decorator

                        @Component({
                           selector:'msg-box',
                           template:'<h2>{{msgText}}</h2>'
                        })
                        class MessageBoxComponent{
                           msgText:string;
                           constructor(){
                                   this.msgText="Hello";
                           }
                        }

                        <body>
                           <msg-box></msg-box>
                        </body>

                        <body>
                           <h2>Hello</h2>
                        </body>

                Directive      
                        
                        Component Directives
                                is nothing but components is to create
                                custom html tags (elements)

                        Attribute Directives
                                is to create a custom attribute

                                in-built Attribute Directives (offerd by angular core library)
                                        
                                        structural attribute Directives
                                                ngIf
                                                ngSwitch
                                                ngFor

                                        Style attribute Directives
                                                style
                                                class
                                                attrib

                                        router attribute Directives
                                        event attribute directives .....

                                User defiend Attribute Directives

                                @Directive({
                                        ...............
                                })
                                class MyDirective{
                                        ...............
                                }

                Pipe
                                is a an angular class,
                                that is sued to tranform a given input
                                into a different format .

                                let d = new Date();
                                let s = "vamsy";

                                <p>{{d}}</p>
                                <p>{{s}}</p>

                                <p>{{d|date:'dd-MMM-yyyy'}}</p>
                                <p>{{s|uppercase}}</p>
                                <p>{{s|lowercase}}</p>

                                in-built pipes

                                        lowercase
                                        uppercase
                                        date
                                        number
                                        currency
                                        json

                                user defined pipes
                                        @Pipe({

                                        })
                                        class MyPipe{

                                        }
                Service
                                is any clsss that holds bussiness logic.

                                @Injectable({

                                })
                                class EmployeeService{
                                
                                        validationLogic....
                                        serverCommunicationRelatedLogic...
                                }

        Data Binding
        ------------------------------------------------

                Interpolation

                        {{angular-expression}}

                One-Way Attribute Binding

                        [attribute]="angular-expression"

                Two-Way Attribute Binding

                        [(attribute)]="angular-expression"

                        ngModal         FormsModule

                Event Binding

                        (eventAttribute)="angularFunction()"

                angularEventAttribute = htmlEvetnAttribute - "on"

                onClick         click
                onBlur          blur
                onDblClick      dblClick
                ........................

                onSubmit        ngSubmit

                Style Binding

                [attr.htmlAttributeName]=""

                [style.cssProperty]=""

                [class]="{class1:true,class2:true}"


                
Angular CLI
---------[Command Line Interface]---

                ng --version

                ng new project-name        //creating a new project

                ng build                  //building and bundling the project

                npm start                 //ng serve --port 4200      

                ng serve --port 4545 -o   //angular project starts


                //Generating different angular blocks

                g --- generate
                                                
                ng g component ComponentName
                ng g modue ModuleName      
                ng g directive DirectiveName
                ng g service ServiceName
                ng g pipe PipeName
                ng g class ClassName
                ng g interface InterfaceName
                ng g guard GuardName

Routing
-------------------------------------------------

based on the url,
     we can control which component must render.

RouterModule

        Routes

                is an array of Route Objects

                Route
                        path
                        component
                        pathMatch
                        redirectTo
                        children
                        canActive
                        canChildActive .....


        RouterOutleyComponent    <router-outlet></router-outlet>

        routerLink     is an attribute directive
                        to be used with <a /> tags

        




Promise
--------------------------

let job = (resolve,reject) =>{

    .....asynchronous coding..
    ...........................
    resolve(data) //to indicate successfull completion

    reject(error) //to indicate errsome abortion.

}

let p = new Promise(job);

p.then(
    (data)=> {   }, //is called on successfull completion
    (error)=>{   }//is called on error.
);


RxJS    
Observables
--------------------------

let job = (observer) =>{
    
    .......asynchronous coding.....

    observer.next(data); //called whenever we need to send a pice of output
    observer.error(err); //called to signal errsome abortion
    observer.complete(); //compeltion successfully.

};

let ob = new Observable(job);

ob.subscribe(
    (data) => {},
    (err) => {},
    () => {}
);


Observable (RxJS) Operators
-----------------

 let ob2 = ob1.pipe(
                map(function1)
        );

ob2 will return function(ele) where ele is each object returned by ob1.
        
        filter

Router Gaurds
------------------------------

        CanActive       
        CanChildActive
        CanDeactive

HttpClientModule
-----------------------------------------------

        HttpClient

                get(url):Observable
                put(url,requestBody):Observable
                post(url,requestBody):Observable
                delete(url):Observable

Angular Forms
-----------------------------        

Template Driven Forms

        HTML 5 Form in teh tmeplate     
        Bind each form control with a field or property

        not easily testable
        can not sustain completed forms.
        validations are not under the control on controller.

Model Driven Form (Rewactive Forms)

        The Form is constructed in the controller
        And the constructed from is bound to html5

        easily testable
        sustain dynamic model changes as they are in the 
        control of the controller not the template.

